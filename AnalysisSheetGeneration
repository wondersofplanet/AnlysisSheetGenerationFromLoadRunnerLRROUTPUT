Sub aaaaaaaaaRunMeForAnalysisSheetGeneration()

RenameSheetIfInvalid

CopyTransactionSummary

Application.Wait Now + TimeValue("00:00:01")

SortAndMoveData

Application.Wait Now + TimeValue("00:00:01")

CheckAndInsertEmptyRowsBasedOnTextPatternBetweenTwoNumbersInTXname

Application.Wait Now + TimeValue("00:00:01")

CopyHeadingRowToSplitData

Application.Wait Now + TimeValue("00:00:01")

DeleteColumnsStartingWithSLAStatus

Application.Wait Now + TimeValue("00:00:01")

DeleteColumnsStartingWithStop

Application.Wait Now + TimeValue("00:00:01")

FindAndColorEmptyRows

AutoFitDatainSplitDataSheet

Application.Wait Now + TimeValue("00:00:01")

RemoveConsecutiveEmptyRows

Application.Wait Now + TimeValue("00:00:01")

FindValueforGivenFieldsAndPasteInStatisticsSheet

Application.Wait Now + TimeValue("00:00:01")

AlignColoredCellsToCenterSpecificSheet

Application.Wait Now + TimeValue("00:00:01")
CreatefinaloutsHEET

Application.Wait Now + TimeValue("00:00:01")

CopyDatafromStatisticsTOfinalout

Application.Wait Now + TimeValue("00:00:01")

CopySplitDataToFinalOutSheet

Application.Wait Now + TimeValue("00:00:01")

SetA9InteriorColorINfinaloutSHEET

Application.Wait Now + TimeValue("00:00:01")

MergeAndCenterInA3FinalOutSheet

Application.Wait Now + TimeValue("00:00:01")

CopyDurationFromInputFileSheettofinaloutSheet

End Sub


Sub RenameSheetIfInvalid()
    Dim currentSheet As Worksheet
    Dim newName As String
    Dim randomNumber As Integer
    
    Set currentSheet = ActiveSheet ' Assuming the current sheet is the one you want to rename
    
    Select Case currentSheet.Name
        Case "InputFile", "txsummary", "Split Data"
            ' Do nothing
        Case Else
            ' If "InputFile" name is already taken, rename to a random name
            If SheetExists("InputFile") Then
                randomNumber = Int((1000 - 1 + 1) * Rnd + 1)
                newName = "DefaultSheetName " & randomNumber
                MsgBox "Please run this script in the 'InputFile' sheet.", vbInformation
                Err.Raise vbObjectError + 9999, , "-- Please run this script in the 'InputFile' sheet. End script and run it from InputFile sheet again, Thank you!--"
                ShowMessageBoxWithOptions
            Else
                newName = "InputFile"
            End If
            
            ' Check if the new name already exists
            If SheetExists(newName) Then
                randomNumber = Int((1000 - 1 + 1) * Rnd + 1)
                newName = "DefaultSheetName " & randomNumber
            End If
            
            currentSheet.Name = newName
    End Select
End Sub

Function SheetExists(sheetName As String) As Boolean
    Dim ws As Worksheet
    
    For Each ws In Worksheets
        If ws.Name = sheetName Then
            SheetExists = True
            Exit Function
        End If
    Next ws
    
    SheetExists = False
End Function



Sub CopyTransactionSummary()
    Dim wsSource As Worksheet
    Dim wsDest As Worksheet
    Dim rngTransaction As Range
    Dim rngCopy As Range
    Dim lastRow As Long
    Dim copyEndRow As Long
    Dim cell As Range
    
    ' Set the source worksheet
    Set wsSource = ThisWorkbook.Sheets("InputFile") ' Change to your source worksheet
     
    ' AutoFit all columns
    wsSource.Columns.AutoFit
    
    ' AutoFit all rows
    wsSource.Rows.AutoFit

    ' Find the cell containing the text "Transaction Name" in the source worksheet
    Set rngTransaction = wsSource.Cells.Find(What:="Transaction Name", LookIn:=xlValues, LookAt:=xlWhole)
    
    If Not rngTransaction Is Nothing Then
        ' Set the destination worksheet (txsummary)
        On Error Resume Next
        Set wsDest = ThisWorkbook.Sheets("txsummary")
        On Error GoTo 0
        
        If wsDest Is Nothing Then
            ' Create a new worksheet named "txsummary"
            Set wsDest = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
            wsDest.Name = "txsummary"
        End If
        
        ' Clear the contents of the destination sheet
        wsDest.Cells.Clear
        
        ' Determine the end row of the range to copy
        lastRow = wsSource.Cells(wsSource.Rows.Count, "A").End(xlUp).Row
        
        ' Find the first empty row after "Transaction Name"
        For copyEndRow = rngTransaction.Row + 1 To lastRow
            Set cell = wsSource.Cells(copyEndRow, rngTransaction.Column)
            ' Trim the content and check if the cell is empty
            If Trim(cell.Value) = "" Then
                Exit For
            End If
        Next copyEndRow
        
        ' Define the range to copy (from the row below the cell containing "Transaction Name" to the first empty row)
        Set rngCopy = wsSource.Range(wsSource.Cells(rngTransaction.Row + 1, 1), wsSource.Cells(copyEndRow - 1, wsSource.Columns.Count))
        
        If Not rngCopy Is Nothing Then
            ' Copy the data from the source sheet to the destination sheet
            rngCopy.Copy wsDest.Cells(1, 1)
            
            MsgBox "Transaction summary copied successfully!", vbInformation
        Else
            MsgBox "No data to copy!", vbExclamation
        End If
    Else
        MsgBox "Transaction Name not found!", vbExclamation
    End If
End Sub





Sub SortAndMoveData()
    Dim wsSource As Worksheet
    Dim wsDest As Worksheet
    Dim dataRange As Range
    Dim cell As Range
    Dim currentPrefix As String
    Dim lastRow As Long
    Dim rowCount As Long
    Dim i As Long

    ' Set the source worksheet
    'Set wsSource = ActiveSheet ' Change to your source worksheet
Set wsSource = ThisWorkbook.Sheets("txsummary")
    ' Check if the destination worksheet "Split Data" exists, otherwise create it
    On Error Resume Next
    Set wsDest = ThisWorkbook.Sheets("Split Data")
    On Error GoTo 0

    If wsDest Is Nothing Then
        ' Destination worksheet does not exist, create it
        Set wsDest = ThisWorkbook.Sheets.Add(After:=ThisWorkbook.Sheets(ThisWorkbook.Sheets.Count))
        wsDest.Name = "Split Data"
    End If

    ' Define the range containing your data in the source sheet
    Set dataRange = wsSource.Range("A1").CurrentRegion ' Includes all rows and columns in the current region of A1
    
    ' Sort the data in the source range based on column A
    dataRange.Sort key1:=wsSource.Range("A1"), order1:=xlAscending, Header:=xlNo

    ' Clear contents of destination sheet before moving data
    wsDest.Cells.Clear

    ' Initialize variables
    lastRow = 1
    currentPrefix = Left(dataRange.Cells(1, 1).Value, 2)
    rowCount = 0

    ' Loop through each cell in the sorted range, starting from the first row
    For i = 1 To dataRange.Rows.Count
        Set cell = dataRange.Cells(i, 1)

        ' Check if the prefix of the current cell is different from the previous cell
        If Left(cell.Value, 2) <> currentPrefix Then
            ' Insert an empty line
            wsDest.Rows(lastRow + rowCount).Insert Shift:=xlDown

            ' Update the current prefix
            currentPrefix = Left(cell.Value, 2)

            ' Update last row and reset rowCount
            lastRow = lastRow + rowCount + 1
            rowCount = 0
        End If

        ' Copy the entire row to the next available row in the destination sheet
        cell.EntireRow.Copy wsDest.Rows(lastRow + rowCount)

        ' Increment rowCount
        rowCount = rowCount + 1
    Next i
  ' Insert a new row at the first row
    wsDest.Rows("1:1").Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
    ' Auto fit columns in the destination sheet
    wsDest.Columns.AutoFit
End Sub

Sub CopyHeadingRowToSplitData()
    Dim wsInputFile As Worksheet
    Dim wsSplitData As Worksheet
    Dim lastRow As Long
    Dim i As Long
    
    ' Define worksheets
    Set wsInputFile = ThisWorkbook.Sheets("InputFile")
    Set wsSplitData = ThisWorkbook.Sheets("Split Data")
    
    ' Find the last row with data in InputFile sheet
    lastRow = wsInputFile.Cells(wsInputFile.Rows.Count, "A").End(xlUp).Row
    
    ' Loop through each row in InputFile
    For i = 1 To lastRow
        ' Check if the first cell in the row contains "Transaction Name"
        If wsInputFile.Cells(i, 1).Value = "Transaction Name" Then
            ' Clear existing data in Split Data sheet
            wsSplitData.Rows(1).ClearContents
            ' Copy the entire row to the first row of Split Data sheet
            wsInputFile.Rows(i).Copy Destination:=wsSplitData.Rows(1)
            ' Exit the loop after finding and copying the row
            Exit For
        End If
    Next i
     ' Insert empty row after the first row
    wsSplitData.Rows(2).Insert Shift:=xlDown, CopyOrigin:=xlFormatFromLeftOrAbove
End Sub


Sub DeleteColumnsStartingWithSLAStatus()
    Dim ws As Worksheet
    Dim lastCol As Long
    Dim i As Long
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Split Data") ' Replace "YourSheetName" with the name of your sheet
    
    ' Find the last column in the worksheet
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    ' Loop through each column
    For i = lastCol To 1 Step -1
        ' Trim and check if the column header starts with "SLA Status"
        If Left(Trim(ws.Cells(1, i).Value), Len("SLA Status")) = "SLA Status" Then
            ' Delete the entire column
            ws.Columns(i).Delete
        End If
    Next i
End Sub

Sub DeleteColumnsStartingWithStop()
    Dim ws As Worksheet
    Dim lastCol As Long
    Dim i As Long
    
    ' Set the worksheet
    Set ws = ThisWorkbook.Sheets("Split Data") ' Replace "YourSheetName" with the name of your sheet
    
    ' Find the last column in the worksheet
    lastCol = ws.Cells(1, ws.Columns.Count).End(xlToLeft).Column
    
    ' Loop through each column
    For i = lastCol To 1 Step -1
        ' Trim and check if the column header starts with "Stop"
        If Left(Trim(ws.Cells(1, i).Value), Len("Stop")) = "Stop" Then
            ' Delete the entire column
            ws.Columns(i).Delete
        End If
    Next i
End Sub

Sub FindAndColorEmptyRows()
    Dim ws As Worksheet
    Dim rng As Range
    Dim cell As Range
    Dim lastRow As Long
    Dim lastCol As Long
    Dim rowIsEmpty As Boolean
    
    ' Specify the sheet name
    Set ws = ThisWorkbook.Sheets("Split Data") ' Replace "YourSheetName" with the name of your sheet
    
    ' Find the range with data
    Set rng = ws.usedRange
    
    ' Loop through each cell in the range and trim its value
    For Each cell In rng
        cell.Value = Application.Trim(cell.Value)
    Next cell
    
    ' Find last row and column
    lastRow = rng.Rows.Count
    lastCol = rng.Columns.Count
    
    ' Loop through each row
    For Each cell In rng.Rows
        rowIsEmpty = True
        ' Check if all cells in the row are empty
        For i = 1 To lastCol
            If Not IsEmpty(cell.Cells(1, i)) Then
                rowIsEmpty = False
                Exit For
            End If
        Next i
        ' If row is empty, color cells in that row light green
        If rowIsEmpty Then
            cell.Interior.Color = RGB(204, 255, 204) ' Light green color (very light shade)
        End If
    Next cell
     MsgBox "Transaction sheet generated in ""Split Data"" Sheet!", vbInformation
End Sub


Sub AutoFitDatainSplitDataSheet()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Split Data") ' Change "Sheet1" to your sheet name
    
    ' AutoFit columns
    ws.Columns.AutoFit
    
    ' AutoFit rows
    ws.Rows.AutoFit
End Sub

Sub CheckAndInsertEmptyRowsBasedOnTextPatternBetweenTwoNumbersInTXname()
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("Split Data") ' Change "Sheet1" to "Split Data"
    Dim lastRow As Long
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    Dim i As Long
    
    ' Loop through rows from the bottom up
    For i = lastRow To 2 Step -1
        Dim currentPattern As String
        Dim previousPattern As String
        Dim rowAbovePrevious As String
        
        currentPattern = ExtractPattern(ws.Cells(i, 1).Value)
        previousPattern = ExtractPattern(ws.Cells(i - 1, 1).Value)
        
        If i > 2 Then
            rowAbovePrevious = ws.Cells(i - 2, 1).Value
        Else
            rowAbovePrevious = "" ' Set rowAbovePrevious to empty string if i is less than or equal to 2
        End If
        
        If currentPattern <> previousPattern Then
            ' Check if the previous row and the row above the previous row are not already empty
            If ws.Cells(i - 1, 1).Value <> "" And rowAbovePrevious <> "" Then
                ws.Rows(i).Insert Shift:=xlDown
            End If
        End If
    Next i
End Sub

Function ExtractPattern(cellValue As String) As String
    Dim regex As Object
    Set regex = CreateObject("VBScript.RegExp")
    regex.Global = True
    regex.Pattern = "\d+"
    
    Dim matches As Object
    Set matches = regex.Execute(cellValue)
    
    If matches.Count >= 2 Then
        ' Return text between the first and second occurrence of numbers
        Dim startPos As Long
        Dim endPos As Long
        startPos = InStr(cellValue, matches(0).Value) + Len(matches(0).Value)
        endPos = InStr(startPos, cellValue, matches(1).Value)
        ExtractPattern = Mid(cellValue, startPos, endPos - startPos)
    Else
        ExtractPattern = ""
    End If
End Function

Sub RemoveConsecutiveEmptyRows()
    Dim ws As Worksheet
    Dim lastRow As Long
    Dim i As Long

    'Specify the worksheet you want to work with
    Set ws = ThisWorkbook.Sheets("Split Data")

    'Find the last row with data in column A
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row

    'Loop through rows and remove consecutive empty rows
    For i = lastRow To 2 Step -1
        ' Check if the cell is empty or has no value and no interior color
        If IsEmpty(ws.Cells(i, 1)) Or (ws.Cells(i, 1).Value = "" And ws.Cells(i, 1).Interior.ColorIndex = xlNone) Then
            ' Check if the previous row is also empty or has no value and no interior color
            If IsEmpty(ws.Cells(i - 1, 1)) Or (ws.Cells(i - 1, 1).Value = "" And ws.Cells(i - 1, 1).Interior.ColorIndex = xlNone) Then
                ws.Rows(i).Delete
            End If
        End If
    Next i
End Sub



'----------------------------------
'----------------------------------
'----------------------------------
'----------------------------------
'----------------------------------
'----------------------------------



Sub FindValueforAndPasteInStatisticsSheet(ByVal searchValue As String)
    Dim wsInput As Worksheet
    Dim wsStatistics As Worksheet
    Dim rowNum As Long
    Dim neededData As Variant
    Dim i As Long
    Dim foundCell As Range
    Dim existingRow As Long
    
    ' Check if Statistics sheet exists, if not, create it
    On Error Resume Next
    Set wsStatistics = Worksheets("Statistics")
    On Error GoTo 0
    If wsStatistics Is Nothing Then
        Set wsStatistics = ThisWorkbook.Worksheets.Add
        wsStatistics.Name = "Statistics"
    End If
    
    ' Set reference to InputFile sheet
    On Error Resume Next
    Set wsInput = Worksheets("InputFile")
    On Error GoTo 0
    
    If wsInput Is Nothing Then
        MsgBox "InputFile sheet not found."
        Exit Sub
    End If
    
    ' Trim all cell values in the InputFile sheet
    For Each cell In wsInput.usedRange
        If Not IsEmpty(cell) Then
            cell.Value = Trim(cell.Value)
        End If
    Next cell
    
    ' Trim the search value
    searchValue = Trim(searchValue)
    
    ' Find searchValue and note down the row number
    With wsInput
        Set foundCell = .Cells.Find(What:=searchValue, LookIn:=xlValues, LookAt:=xlWhole, MatchCase:=False, SearchFormat:=False)
        If foundCell Is Nothing Then
            MsgBox searchValue & " not found in InputFile sheet."
            Exit Sub
        End If
        rowNum = foundCell.Row
    End With
    
    ' Find the needed data in the row (trimming each cell value)
    With wsInput
        For i = 1 To .Columns.Count
            If ContainsNumber(Trim(.Cells(rowNum, i).Value)) Then
                neededData = .Cells(rowNum, i).Value
                Exit For
            End If
        Next i
    End With
    
    ' Check if data already exists in the Statistics sheet
    With wsStatistics
        Set foundCell = .Columns("A").Find(What:=searchValue, LookIn:=xlValues, LookAt:=xlPart, MatchCase:=False, SearchFormat:=False)
        If foundCell Is Nothing Then
            ' If data doesn't exist, find the first empty row
            existingRow = .Cells(.Rows.Count, "A").End(xlUp).Row + 1
        Else
            ' If data exists, update the existing row
            existingRow = foundCell.Row
        End If
        .Cells(existingRow, "A").Value = searchValue
        .Cells(existingRow, "B").Value = neededData
    End With
     ' Autofit columns after pasting data
        wsStatistics.Columns("A:B").AutoFit
End Sub

Sub ShowMessageBoxWithOptions()
    Dim userResponse As VbMsgBoxResult
    
    ' Display the message box with options
    userResponse = MsgBox("Do you want to continue?", vbYesNoCancel + vbQuestion, "Continue?")
    
    ' Check the user's response and take action accordingly
    Select Case userResponse
        Case vbYes
            MsgBox "You chose to continue.", vbInformation, "Continue"
            ' Add your code to continue here
        Case vbNo
            MsgBox "You chose not to continue.", vbExclamation, "Stop"
            ' Add your code to stop here
        Case vbCancel
            MsgBox "Operation canceled.", vbInformation, "Canceled"
            ' Add your code for cancellation here
    End Select
End Sub
Function ContainsNumber(ByVal inputString As String) As Boolean
    Dim i As Integer
    ContainsNumber = False
    For i = 1 To Len(inputString)
        If IsNumeric(Mid(inputString, i, 1)) Then
            ContainsNumber = True
            Exit Function
        End If
    Next i
End Function

'Maximum Running Vusers
'Total Throughput
'Average Throughput
'Average Hits per Second
'Total Hits
'Passed Transactions Ratio

Sub FindValueforGivenFieldsAndPasteInStatisticsSheet()

   
  
    FindValueforAndPasteInStatisticsSheet "Maximum Running Vusers"
	
	Application.Wait Now + TimeValue("00:00:01")
	
    FindValueforAndPasteInStatisticsSheet "Total Throughput (bytes)"
	
	Application.Wait Now + TimeValue("00:00:01")
	
    FindValueforAndPasteInStatisticsSheet "Average Throughput (B/s)"
	
	Application.Wait Now + TimeValue("00:00:01")
	
    FindValueforAndPasteInStatisticsSheet "Total Hits:"
	
	Application.Wait Now + TimeValue("00:00:01")
	
    FindValueforAndPasteInStatisticsSheet "Average Hits per Second"
	
	Application.Wait Now + TimeValue("00:00:01")
	
    MsgBox "Completed Processing!", vbExclamation

End Sub






'----------------------------------
'----------------------------------
'----------------------------------
'----------------------------------
'----------------------------------
'----------------------------------

Sub AlignColoredCellsToCenterSpecificSheet()
    Dim ws As Worksheet
    Dim cell As Range
    Dim usedRange As Range
    Dim sheetName As String
    
    ' Specify the name of the worksheet you want to target
    sheetName = "YourSheetName"
    
    ' Set the worksheet object
    Set ws = ThisWorkbook.Sheets("Split Data")
    
    ' Get the used range of the worksheet
    Set usedRange = ws.usedRange
    
    ' Loop through each cell in the used range
    For Each cell In usedRange
        ' Check if the cell has a fill color
        If cell.Interior.ColorIndex <> -4142 Then
            ' Center align the cell content horizontally and vertically
            cell.HorizontalAlignment = xlCenter
            cell.VerticalAlignment = xlCenter
        End If
    Next cell
End Sub



'----------------------------------
'----------------------------------
'----------------------------------
'----------------------------------'----------------------------------
'----------------------------------'----------------------------------
'----------------------------------'----------------------------------
'----------------------------------'----------------------------------
'----------------------------------

Sub CreatefinaloutsHEET()
    Dim ws As Worksheet
    Dim wsExists As Boolean
    Dim wsName As String
    Dim i As Integer

    wsName = "finalout"
    wsExists = False

    ' Check if the sheet "finalout" already exists
    On Error Resume Next
    Set ws = ThisWorkbook.Sheets(wsName)
    On Error GoTo 0

    If Not ws Is Nothing Then
        wsExists = True
    End If

    ' If the sheet exists, delete it
    If wsExists Then
        Application.DisplayAlerts = False
        ws.Delete
        Application.DisplayAlerts = True
    End If

    ' Create a new sheet named "finalout"
    Set ws = ThisWorkbook.Sheets.Add
    ws.Name = wsName

    ' Merge columns B to I up to the 8th row
    For i = 1 To 8
        ws.Range(ws.Cells(i, 2), ws.Cells(i, 9)).Merge
    Next i

    ' Set content in cells A1, A2, and A3
    ws.Range("A1").Value = "Test duration"
    ws.Range("A2").Value = "Duration:"
    ws.Range("A3").Value = "Statistics Summary"
    ws.Range("A3:B3").Interior.Color = RGB(0, 0, 139) ' Darkest blue color
    ws.Range("A3:B3").Font.Color = RGB(255, 255, 255) ' White text color
    ws.Range("A3").HorizontalAlignment = xlCenter
    ws.Range("A3").VerticalAlignment = xlCenter

    ' Auto fit the entire sheet
    ws.Columns.AutoFit
    ws.Rows.AutoFit
End Sub

'----------------------------------
'----------------------------------

Sub CopyDatafromStatisticsTOfinalout()
    Dim sourceSheet As Worksheet
    Dim destinationSheet As Worksheet
    Dim i As Integer
    
    ' Set the source and destination sheets
    Set sourceSheet = ThisWorkbook.Sheets("Statistics")
    Set destinationSheet = ThisWorkbook.Sheets("finalout")
    
    ' Copy data according to the rules
    
    ' Copy data from column A
    For i = 2 To 6
        destinationSheet.Cells(i + 2, 1).Value = sourceSheet.Cells(i, 1).Value
    Next i
    
    ' Copy data from column B
    For i = 2 To 6
        destinationSheet.Cells(i + 2, 2).Value = sourceSheet.Cells(i, 2).Value
    Next i
    
    ' You can extend this pattern for additional columns if needed
End Sub


'----------------------------------
'----------------------------------
Sub CopySplitDataToFinalOutSheet()
    Dim sourceSheet As Worksheet
    Dim finalOutSheet As Worksheet
    Dim lastRow As Long
    Dim lastCol As Long
    Dim i As Long
    
    ' Set source sheet
    Set sourceSheet = ThisWorkbook.Sheets("Split Data")
    
    ' Set final output sheet
    Set finalOutSheet = ThisWorkbook.Sheets("finalout")
    
    ' Find the last row with data in the source sheet
    lastRow = sourceSheet.Cells(sourceSheet.Rows.Count, "A").End(xlUp).Row
    
    ' Find the last column with data in row 9
    lastCol = sourceSheet.Cells(9, sourceSheet.Columns.Count).End(xlToLeft).Column
    
    ' Copy data from Split Data sheet to finalout sheet
    For i = 1 To lastRow
        sourceSheet.Rows(i).Copy finalOutSheet.Rows(i + 8) ' Copy and paste to 9th row onwards in finalout sheet
    Next i
    
    ' Auto fit columns in the finalout sheet
    finalOutSheet.Columns.AutoFit
    
 
End Sub


'----------------------------------
'----------------------------------


Sub SetA9InteriorColorINfinaloutSHEET()
    Dim finalOutSheet As Worksheet
    Dim lastColumn As Long
    
    Set finalOutSheet = ThisWorkbook.Sheets("finalout")
    
    With finalOutSheet
        ' Find the last used column in the 9th row
        lastColumn = .Cells(9, .Columns.Count).End(xlToLeft).Column
        
        ' Set interior color for the range from 9th row to lastColumn
        .Range(.Cells(9, 1), .Cells(9, lastColumn)).Interior.Color = RGB(144, 238, 144) ' Light Green
    End With
End Sub




'----------------------------------
'----------------------------------




Sub MergeAndCenterInA3FinalOutSheet()
    ' Specify the worksheet where you want to perform the merge and center operation
    Dim ws As Worksheet
    Set ws = ThisWorkbook.Sheets("finalout")
    
    ' Merge cells A3 and B3 in the specified worksheet
    With ws
        .Range("A3:B3").Merge
        .Range("A3:B3").HorizontalAlignment = xlCenter
    End With
End Sub




'----------------------------------
'----------------------------------

Sub CopyDurationFromInputFileSheettofinaloutSheet()
    Dim inputSheet As Worksheet
    Dim finalOutSheet As Worksheet
    Dim durationCell As Range
    Dim copyRange As Range
    
    ' Set references to the InputFile and finalout sheets
    Set inputSheet = ThisWorkbook.Sheets("InputFile")
    Set finalOutSheet = ThisWorkbook.Sheets("finalout")
    
    ' Find the cell containing "Duration" in the InputFile sheet
    Set durationCell = inputSheet.Cells.Find(What:="Duration", LookIn:=xlValues, LookAt:=xlWhole)
    
    ' Check if "Duration" cell is found
    If Not durationCell Is Nothing Then
        ' Set the range to copy (from the cell to its right)
        Set copyRange = durationCell.Offset(0, 1)
        
        ' Copy the data to finalout sheet C3 cell
        finalOutSheet.Range("B2").Value = copyRange.Value
    Else
        MsgBox "Duration not found in InputFile sheet."
    End If
End Sub



'----------------------------------
'----------------------------------
